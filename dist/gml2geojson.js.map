{"version":3,"file":"gml2geojson.js","sources":["../src/index.js"],"sourcesContent":["const parser = new DOMParser();\r\nconst GEONODENAMES = ['geometryproperty', 'shape'];\r\n\r\nexport function parseGML(str) {\r\n    const geojson = {\r\n        type: 'FeatureCollection',\r\n        features: []\r\n    };\r\n    const xmlDoc = parser.parseFromString(str, 'text/xml');\r\n    const featureCollectionEle = xmlDoc.children[0];\r\n    if (!featureCollectionEle || !featureCollectionEle.nodeName || getNodeName(featureCollectionEle).indexOf('featurecollection') === -1) {\r\n        return geojson;\r\n    }\r\n    let i = 0;\r\n    const features = [];\r\n    while (featureCollectionEle.children.item(i)) {\r\n        const featureEle = featureCollectionEle.children.item(i);\r\n        const nodeName = getNodeName(featureEle);\r\n        if (nodeName.indexOf('featuremember') > -1 && featureEle.children[0]) {\r\n            features.push(featureEle.children[0]);\r\n        }\r\n        i++;\r\n    }\r\n    for (let i = 0, len = features.length; i < len; i++) {\r\n        const f = features[i];\r\n        const properties = getFeatureEleProperties(f);\r\n        const geometry = getFeatureEleGeometry(f, properties.isShape);\r\n        if (!geometry || !properties) {\r\n            continue;\r\n        }\r\n        const feature = {\r\n            type: 'Feature',\r\n            geometry,\r\n            properties\r\n        };\r\n        geojson.features.push(feature);\r\n\r\n    }\r\n    return geojson;\r\n}\r\n\r\nfunction getFeatureEleGeometry(featureEle, isShape) {\r\n    const children = featureEle.children || [];\r\n    let type;\r\n    let coordinates = [];\r\n    for (let i = 0, len = children.length; i < len; i++) {\r\n        const node = children[i];\r\n        const nodeName = getNodeName(node);\r\n        if (!isGeoAttribute(nodeName)) {\r\n            continue;\r\n        }\r\n        if (node.children[0]) {\r\n            type = node.children[0].nodeName.split('gml:')[1] || '';\r\n            if (!type) {\r\n                return;\r\n            }\r\n        }\r\n        if (node.children[0].children[0]) {\r\n            const nodeName = getNodeName(node.children[0].children[0]);\r\n            let geoNodes = node.children;\r\n            if (isMulti(nodeName)) {\r\n                geoNodes = flatMultiGeoNodes(geoNodes);\r\n            }\r\n            if (!geoNodes.length) {\r\n                return;\r\n            }\r\n            for (let j = 0, len1 = geoNodes.length; j < len1; j++) {\r\n                const geoNode = geoNodes[j];\r\n                let coords = parseGeoCoordinates(geoNode.children, isShape);\r\n                if (!geoIsPolygon(type)) {\r\n                    coords = coords[0];\r\n                }\r\n                coordinates.push(coords);\r\n            }\r\n            if (coordinates.length === 1) {\r\n                coordinates = coordinates[0];\r\n            }\r\n        }\r\n    }\r\n    if (!type || !coordinates.length) {\r\n        return;\r\n    }\r\n    return {\r\n        type,\r\n        coordinates\r\n    };\r\n}\r\n\r\nfunction getFeatureEleProperties(featureEle) {\r\n    const children = featureEle.children || [];\r\n    const properties = {};\r\n    let isShape = false;\r\n    for (let i = 0, len = children.length; i < len; i++) {\r\n        const node = children[i];\r\n        const nodeName = getNodeName(node);\r\n        if (isGeoAttribute(nodeName)) {\r\n            if (nodeName.indexOf('shape') > -1) {\r\n                isShape = true;\r\n            }\r\n            continue;\r\n        }\r\n        const key = nodeName.split(':')[1];\r\n        if (!key) {\r\n            continue;\r\n        }\r\n        const value = node.textContent || '';\r\n        properties[key] = value;\r\n    }\r\n    properties.isShape = isShape;\r\n    return properties;\r\n}\r\n\r\nfunction flatMultiGeoNodes(nodes) {\r\n    const geoNodes = [];\r\n    for (let i = 0, len = nodes.length; i < len; i++) {\r\n        const children = nodes[i].children;\r\n        for (let j = 0, len1 = children.length; j < len1; j++) {\r\n            geoNodes.push(children[j].children[0]);\r\n        }\r\n    }\r\n    return geoNodes;\r\n}\r\n\r\nfunction isMulti(nodeName) {\r\n    return nodeName.indexOf('member') > -1;\r\n}\r\n\r\nfunction isGeoAttribute(nodeName) {\r\n    for (let i = 0, len = GEONODENAMES.length; i < len; i++) {\r\n        if (nodeName.indexOf(GEONODENAMES[i]) > -1) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction parseGeoCoordinates(coordNodes, isShape) {\r\n    const coordiantes = [];\r\n    for (let i = 0, len = coordNodes.length; i < len; i++) {\r\n        const coordNode = findCoordsNode(coordNodes[i]);\r\n        coordiantes.push(parseCoordiantes(coordNode.textContent, isShape));\r\n    }\r\n    return coordiantes;\r\n}\r\n\r\nfunction parseCoordiantes(text, isShape) {\r\n    if (!text) {\r\n        return;\r\n    }\r\n    const split = ' ';\r\n    const coords = text.split(split);\r\n    let [c1, c2] = coords;\r\n    if (c1.indexOf(',') > -1) {\r\n        const coordinates = [];\r\n        for (let i = 0, len = coords.length; i < len; i++) {\r\n            const c = coords[i];\r\n            let [lng, lat] = c.split(',');\r\n            lng = trim(lng);\r\n            lat = trim(lat);\r\n            coordinates.push([lng, lat]);\r\n        }\r\n        return coordinates.length > 1 ? coordinates : coordinates[0];\r\n    } else {\r\n        c1 = trim(c1);\r\n        c2 = trim(c2);\r\n        if (isShape) {\r\n            return [c2, c1];\r\n        }\r\n        return [c1, c2];\r\n    }\r\n}\r\n\r\nfunction trim(str) {\r\n    const BLANK = ' ';\r\n    while (str.indexOf(BLANK) > -1) {\r\n        str = str.replace(BLANK, '');\r\n    }\r\n    return parseFloat(str);\r\n}\r\n\r\nfunction findCoordsNode(node) {\r\n    let nodeName = getNodeName(node);\r\n    while (nodeName.indexOf(':coordinates') === -1 && nodeName.indexOf(':pos') === -1) {\r\n        node = node.children[0];\r\n        nodeName = getNodeName(node);\r\n    }\r\n    return node;\r\n}\r\n\r\nfunction getNodeName(node) {\r\n    return (node.nodeName || '').toLocaleLowerCase();\r\n}\r\n\r\nfunction geoIsPolygon(type) {\r\n    return type.indexOf('Polygon') > -1;\r\n}\r\n"],"names":[],"mappings":"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"}